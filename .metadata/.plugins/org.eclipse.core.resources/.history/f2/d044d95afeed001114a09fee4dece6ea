package csg.object.tree;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import junit.framework.Assert;
import math.Point;
import math.Vector;

import org.junit.Before;
import org.junit.Test;

import primitives.Plane;
import primitives.Surface;
import util.Constants;
import util.Util;
import csg.operation.BoundedBy;
import etc.Color;
import etc.Effects;
import etc.HitData;
import etc.Ray;
import etc.RaytracerException;
public class Test_CSGTree
{
	@Test(expected=RaytracerException.class)
	public void setRoot_NullSurface_ExpectNullPointerException() throws Exception
	{
		//Arrange
		CSGNode node = null;
		CSGTree classUnderTest = new CSGTree();
		
		//Act
		classUnderTest.setRoot(node);
		
		//Assert
		throw new Exception("Expected exception not thrown.");
	}
	
	@Test(expected=RaytracerException.class)
	public void setRoot_OperationNullChildren_ExpectException() throws Exception
	{
		//Arrange
		CSGTree classUnderTest = new CSGTree();
		CSGNode node = new CSGNode(new BoundedBy(classUnderTest));
		
		//Act
		classUnderTest.setRoot(node);
		
		//Assert
		throw new Exception("Expected exception not thrown.");
	}
	
	@Test(expected=NullPointerException.class)
	public void setRoot_OperationNullLeftChild_ExpectException() throws Exception
	{
		//Arrange
		Surface testSurface = Test_CSGTreeHelper.createTestSurface();
		CSGNode rightChild = new CSGNode(testSurface);
		CSGTree classUnderTest = new CSGTree();
		CSGNode node = new CSGNode(new BoundedBy(classUnderTest));
		node.setRightChild(rightChild);
		
		//Act
		classUnderTest.setRoot(node);
		
		//Assert
		throw new Exception("Expected exception not thrown.");
	}
	
	@Test(expected=NullPointerException.class)
	public void setRoot_OperationNullRightChild_ExpectException() throws Exception
	{
		//Arrange
		Surface testSurface = Test_CSGTreeHelper.createTestSurface();
		CSGNode leftChild = new CSGNode(testSurface);
		CSGTree classUnderTest = new CSGTree();
		CSGNode node = new CSGNode(new BoundedBy(classUnderTest));
		node.setLeftChild(leftChild);
		
		//Act
		classUnderTest.setRoot(node);
		
		//Assert
		throw new Exception("Expected exception not thrown.");
	}
	
	@Test(expected=RaytracerException.class)
	public void setRoot_SurfaceWithChildren_ExpectException() throws Exception
	{
		//Arrange
		Surface testSurface = Test_CSGTreeHelper.createTestSurface();
		CSGNode leftChild = new CSGNode(testSurface);
		CSGNode rightChild = new CSGNode(testSurface);
		rightChild.setLeftChild(leftChild);
		rightChild.setRightChild(rightChild);
		CSGTree classUnderTest = new CSGTree();
		CSGNode node = new CSGNode(new BoundedBy(classUnderTest));
		node.setLeftChild(leftChild);
		node.setRightChild(rightChild);
		
		//Act
		classUnderTest.setRoot(node);
		
		//Assert
		throw new Exception("Expected exception not thrown.");
	}
	
	@Test
	public void setRoot_OpWithChildren_ExpectNoException() throws Exception
	{
		//Arrange
		Surface testSurface = Test_CSGTreeHelper.createTestSurface();
		CSGNode leftChild = new CSGNode(testSurface);
		CSGNode rightChild = new CSGNode(testSurface);
		CSGTree classUnderTest = new CSGTree();
		CSGNode node = new CSGNode(new BoundedBy(classUnderTest));
		node.setLeftChild(leftChild);
		node.setRightChild(rightChild);
		
		//Act
		classUnderTest.setRoot(node);
		
		//Assert
	}
	
	@Test
	public void setRoot_OpWithUnbalancedTree_ExpectNoException() throws Exception
	{
		//Arrange
		Surface testSurface = Test_CSGTreeHelper.createTestSurface();
		CSGNode leftChild = new CSGNode(testSurface);
		CSGTree classUnderTest = new CSGTree();
		CSGNode rightChild = new CSGNode(new BoundedBy(classUnderTest));
		CSGNode node = new CSGNode(new BoundedBy(classUnderTest));
		rightChild.setLeftChild(leftChild);
		rightChild.setRightChild(new CSGNode(testSurface));
		node.setLeftChild(leftChild);
		node.setRightChild(rightChild);
		
		//Act
		classUnderTest.setRoot(node);
		
		//Assert
	}
	
	@Test(expected=RaytracerException.class)
	public void getHitData_WithNoRootSet_ExpectException() throws RaytracerException
	{
		//Arrange
		CSGTree classUnderTest = new CSGTree();
		Ray testRay = Test_CSGTreeHelper.getTestRay();
		
		//Act
		classUnderTest.getHitData(testRay);
		
		//Assert
		Assert.fail("Expected exception not thrown.");
	}
	
	@Test 
	public void getHitData_WithSurfaceInRoot_ExpectSurfaceHitData() throws RaytracerException
	{
		//Arrange
		Ray testRay = Test_CSGTreeHelper.getTestRay();
		Surface testSurface = Test_CSGTreeHelper.createTestSurface();
		CSGNode node = new CSGNode(testSurface);
		
		CSGTree classUnderTest = new CSGTree();
		classUnderTest.setRoot(node);
		
		//Act
		HitData retHitData = classUnderTest.getHitData(testRay);
		
		//Assert
		Assert.assertEquals(testHitData, retHitData);
	}
}
