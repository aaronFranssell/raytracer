package csg.object.tree;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import math.Point;
import math.Vector;

import org.junit.Before;
import org.junit.Test;

import primitives.Plane;
import primitives.Surface;
import util.Constants;
import util.Util;
import csg.operation.BoundedBy;
import etc.Color;
import etc.Effects;
import etc.HitData;
import etc.Ray;
import etc.RaytracerException;
public class Test_CSGTree
{
	private Util ops;
	private Surface testSurface;
	private Color cL;
	private Color cR;
	
	@Before
	public void setUp() throws RaytracerException
	{
		ops = mock(Util.class);
		cR = new Color(0.4,0.8,0.4);
		cL = new Color(0.4,0.4,0.4);
		Effects effects = new Effects();
		effects.setPhong(true);
		effects.setReflective(true);
		Point point = new Point(0.0,-2.5,0.0);
		Vector normal =new Vector(0.0,1.0,0.0);
		testSurface = new Plane(normal, point, cR,cL, Constants.cA, effects, ops);
		Ray testRay = new Ray(new Vector(0.0,0.0,0.0), new Point(0.0,0.0,0.0));
		HitData testHitData = new HitData();
		when(testSurface.getHitData(testRay)).thenReturn(testHitData);
	}
	
	@Test(expected=RaytracerException.class)
	public void setRoot_NullSurface_ExpectNullPointerException() throws Exception
	{
		//Arrange
		CSGNode node = null;
		CSGTree classUnderTest = new CSGTree();
		
		//Act
		
		
		//Assert
		throw new Exception("Expected exception not thrown.");
	}
	
	@Test(expected=RaytracerException.class)
	public void testConstructor_OperationNullChildren_ExpectException() throws Exception
	{
		//Arrange
		CSGNode node = new CSGNode(new BoundedBy(ops));
		
		//Act
		new CSGTree(node);
		
		//Assert
		throw new Exception("Expected exception not thrown.");
	}
	
	@Test(expected=NullPointerException.class)
	public void testConstructor_OperationNullLeftChild_ExpectException() throws Exception
	{
		//Arrange
		CSGNode node = new CSGNode(new BoundedBy(ops));
		CSGNode rightChild = new CSGNode(testSurface);
		node.setRightChild(rightChild);
		
		//Act
		new CSGTree(node);
		
		//Assert
		throw new Exception("Expected exception not thrown.");
	}
	
	@Test(expected=NullPointerException.class)
	public void testConstructor_OperationNullRightChild_ExpectException() throws Exception
	{
		//Arrange
		CSGNode node = new CSGNode(new BoundedBy(ops));
		CSGNode leftChild = new CSGNode(testSurface);
		node.setLeftChild(leftChild);
		
		//Act
		new CSGTree(node);
		
		//Assert
		throw new Exception("Expected exception not thrown.");
	}
	
	@Test(expected=RaytracerException.class)
	public void testConstructor_SurfaceWithChildren_ExpectException() throws Exception
	{
		//Arrange
		CSGNode node = new CSGNode(new BoundedBy(ops));
		CSGNode leftChild = new CSGNode(testSurface);
		CSGNode rightChild = new CSGNode(testSurface);
		rightChild.setLeftChild(leftChild);
		rightChild.setRightChild(rightChild);
		node.setLeftChild(leftChild);
		node.setRightChild(rightChild);
		
		//Act
		new CSGTree(node);
		
		//Assert
		throw new Exception("Expected exception not thrown.");
	}
	
	@Test
	public void testConstructor_OpWithChildren_ExpectNoException() throws Exception
	{
		//Arrange
		CSGNode node = new CSGNode(new BoundedBy(ops));
		CSGNode leftChild = new CSGNode(testSurface);
		CSGNode rightChild = new CSGNode(testSurface);
		node.setLeftChild(leftChild);
		node.setRightChild(rightChild);
		
		//Act
		new CSGTree(node);
		
		//Assert
	}
	
	@Test
	public void testConstructor_OpWithUnbalancedTree_ExpectNoException() throws Exception
	{
		//Arrange
		CSGNode node = new CSGNode(new BoundedBy(ops));
		CSGNode leftChild = new CSGNode(testSurface);
		CSGNode rightChild = new CSGNode(new BoundedBy(ops));
		node.setLeftChild(leftChild);
		node.setRightChild(rightChild);
		rightChild.setLeftChild(leftChild);
		rightChild.setRightChild(new CSGNode(testSurface));
		
		//Act
		new CSGTree(node);
		
		//Assert
	}
	
	@Test 
	public void getHitData_WithSurfaceInRoot_ExpectSurfaceHitData() throws RaytracerException
	{
		//Arrange
		CSGNode node = new CSGNode(testSurface);
		CSGTree classUnderTest = new CSGTree(node);
		
		//Act
		//classUnderTest.getHitData(testRay, testSurface)
	}
}
